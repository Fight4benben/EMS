var BootstrapPagination = function (n, t) {
    var i = function (n, t) {
        this.options = {
            total: 0,
            pageSize: 20,
            pageIndex: 0,
            pageGroupSize: 10,
            leftFormateString: "本页{count}条记录/共{total}条记录",
            rightFormateString: "第{pageNumber}页/共{totalPages}页",
            pageNumberFormateString: "{pageNumber}",
            pageSizeListFormateString: "每页显示{pageSize}条记录",
            prevPageText: "<",
            nextPageText: ">",
            prevGroupPageText: "<<",
            nextGroupPageText: ">>",
            firstPageText: "首页",
            lastPageText: "尾页",
            pageInputPlaceholder: "GO",
            pageInputTimeout: 800,
            pageSizeList: [5, 10, 20, 50, 100, 200],
            pageChanged: function () {
            },
            layoutScheme: "lefttext,pagesizelist,firstpage,prevgrouppage,prevpage,pagenumber,nextpage,nextgrouppage,lastpage,pageinput,righttext"
        };
        this.pageIndex = function (n) {
            if (n === undefined) return this.options.pageIndex;
            this.options.pageIndex = n;
            this.fixPageIndex();
            this.render();
            this.options.pageChanged && this.options.pageChanged(this.options.pageIndex, this.options.pageSize)
        };
        this.pageSize = function (n) {
            if (n === undefined) return this.options.pageSize;
            this.options.pageSize = n;
            this.fixPageIndex();
            this.render();
            this.options.pageChanged && this.options.pageChanged(this.options.pageIndex, this.options.pageSize)
        };
        this.totalPages = function () {
            return Math.floor((this.options.total + this.options.pageSize - 1) / this.options.pageSize)
        };
        this.currentCount = function () {
            var n = this.options.total - this.options.pageSize * this.options.pageIndex;
            return n > this.options.pageSize ? this.options.pageSize : n
        };
        this.createPageButton = function (n, t) {
            var i = $("<li><\/li>"),
                r = $("<a href='javascript:;'>" + this.options.pageNumberFormateString.replace("{pageNumber}", n) + "<\/a>");
            if (t !== undefined && t != this.options.pageIndex) r.off("click").on("click", $.proxy(this.pageIndex, this, t));
            return i.append(r), t !== undefined && t == this.options.pageIndex && i.addClass("active"), t === undefined && i.addClass("disabled"), i
        };
        this.createLabel = function (n) {
            var t = $("<li><span>" + n + "<\/span><\/li>");
            return t.addClass("disabled"), t
        };
        this.doFormateString = function (n) {
            return n.replace("{count}", this.currentCount()).replace("{total}", this.options.total).replace("{pageNumber}", this.options.total > 0 ? this.options.pageIndex + 1 : 0).replace("{totalPages}", this.totalPages())
        };
        this.createPageSizeList = function (n) {
            var s = $("<li><\/li>"), f = $('<div class="input-group dropup" style="float: left;"><\/div>'),
                t = $('<button class="btn btn-default dropdown-toggle" type="button" data-toggle="dropdown" aria-expanded="true">' + this.options.pageSizeListFormateString.replace("{pageSize}", '<span class="pagesize">' + this.options.pageSize + "<\/span>") + '<span class="caret"><\/span><\/button>'),
                e, i, r, u, o;
            switch (n) {
                case 1:
                    t.removeClass("pagesize-fix-center").removeClass("pagesize-fix-right").addClass("pagesize-fix-left");
                    break;
                case 2:
                    t.removeClass("pagesize-fix-left").removeClass("pagesize-fix-right").addClass("pagesize-fix-center");
                    break;
                case 3:
                    t.removeClass("pagesize-fix-left").removeClass("pagesize-fix-center").addClass("pagesize-fix-right")
            }
            for (e = $('<ul class="dropdown-menu" role="menu"><\/ul>'), s.append(f), f.append(t), f.append(e), i = 0; i < this.options.pageSizeList.length; i++) {
                r = this.options.pageSizeList[i];
                u = $('<li role="presentation"><\/li>');
                r == this.options.pageSize && u.attr("class", "active");
                o = $('<a role="menuitem" tabindex="-1" href="javascript:;">' + r + "<\/a>");
                o.off("click").on("click", $.proxy(this.pageSize, this, r));
                u.append(o);
                e.append(u)
            }
            return s
        };
        this.createPageInput = function () {
            var t = $("<li><\/li>"), i = $('<div class="input-group page-input"><\/div>'), n;
            t.append(i);
            n = $('<input type="text" class="form-control" />');
            this.options.pageInputPlaceholder && n.attr("placeholder", this.options.pageInputPlaceholder);
            i.append(n);
            n.off("keyup").on("keyup", $.proxy(this.pageInputEvents, this));
            return t
        };
        this.timeoutId = 0;
        this.pageInputEvents = function (n) {
            var t = $(n.target), i = t.val(), r, u;
            if (!/^\d+$/gi.test(i)) return t.parent().addClass("has-error"), !1;
            t.parent().removeClass("has-error");
            r = parseInt(i) - 1;
            u = this;
            clearTimeout(this.timeoutId);
            this.timeoutId = setTimeout(function () {
                u.pageIndex(r)
            }, this.options.pageInputTimeout)
        };
        this.fixPageIndex = function () {
            var n = this.totalPages();
            this.options.pageIndex > n - 1 && (this.options.pageIndex = n - 1);
            this.options.pageIndex < 0 && (this.options.pageIndex = 0)
        };
        this.render = function () {
            for (var e, i, f, t = [], u = this.options.layoutScheme.split(","), r = 0; r < u.length; r++) switch (u[r]) {
                case"lefttext":
                    this.options.leftFormateString && (t[t.length] = this.createLabel(this.doFormateString(this.options.leftFormateString)));
                    break;
                case"firstpage":
                    this.options.firstPageText && (this.options.pageIndex == 0 ? t[t.length] = this.createPageButton(this.options.firstPageText) : (i = 0, t[t.length] = this.createPageButton(this.options.firstPageText, i)));
                    break;
                case"prevgrouppage":
                    this.options.prevGroupPageText && (this.options.pageIndex == 0 ? t[t.length] = this.createPageButton(this.options.prevGroupPageText) : (i = this.options.pageIndex - this.options.pageGroupSize < 0 ? 0 : this.options.pageIndex - this.options.pageGroupSize, t[t.length] = this.createPageButton(this.options.prevGroupPageText, i)));
                    break;
                case"prevpage":
                    this.options.prevPageText && (this.options.pageIndex <= 0 ? t[t.length] = this.createPageButton(this.options.prevPageText) : (i = this.options.pageIndex - 1, t[t.length] = this.createPageButton(this.options.prevPageText, i)));
                    break;
                case"pagenumber":
                    if (this.options.pageNumberFormateString) for (i = this.options.pageIndex - Math.floor((this.options.pageGroupSize - 1) / 2), i + this.options.pageGroupSize > this.totalPages() - 1 && (i = this.totalPages() - this.options.pageGroupSize), i < 0 && (i = 0), e = 0; e < this.options.pageGroupSize && i < this.totalPages(); e++) t[t.length] = this.createPageButton(i + 1, i), i++;
                    break;
                case"nextpage":
                    this.options.nextPageText && (this.options.pageIndex < this.totalPages() - 1 ? (i = this.options.pageIndex + 1, t[t.length] = this.createPageButton(this.options.nextPageText, i)) : t[t.length] = this.createPageButton(this.options.nextPageText));
                    break;
                case"nextgrouppage":
                    this.options.nextGroupPageText && (this.options.pageIndex < this.totalPages() - 1 ? (i = this.options.pageIndex + this.options.pageGroupSize > this.totalPages() - 1 ? this.totalPages() - 1 : this.options.pageIndex + this.options.pageGroupSize, t[t.length] = this.createPageButton(this.options.nextGroupPageText, i)) : t[t.length] = this.createPageButton(this.options.nextGroupPageText));
                    break;
                case"lastpage":
                    this.options.lastPageText && (this.options.pageIndex < this.totalPages() - 1 ? (i = this.totalPages() - 1, t[t.length] = this.createPageButton(this.options.lastPageText, i)) : t[t.length] = this.createPageButton(this.options.lastPageText));
                    break;
                case"pageinput":
                    t[t.length] = this.createPageInput();
                    break;
                case"pagesizelist":
                    this.options.pageSizeList && (f = 0, u.length > 1 && (r > 0 && r < u.length - 1 ? f = 2 : r == 0 ? f = 1 : r == u.length - 1 && (f = 3)), t[t.length] = this.createPageSizeList(f));
                    break;
                case"righttext":
                    this.options.rightFormateString && (t[t.length] = this.createLabel(this.doFormateString(this.options.rightFormateString)))
            }
            n.children().remove();
            n.append(t)
        };
        this.init = function () {
            if (n.data("layoutscheme") !== undefined && (this.options.layoutScheme = n.data("layoutscheme")), n.data("total") !== undefined && (this.options.total = parseInt(n.data("total"))), n.data("pagesize") !== undefined && (this.options.pageSize = parseInt(n.data("pagesize"))), n.data("pagegroupsize") !== undefined && (this.options.pageGroupSize = parseInt(n.data("pagegroupsize"))), n.data("pageindex") !== undefined && (this.options.pageIndex = parseInt(n.data("pageindex"))), n.data("leftformatestring") !== undefined && (this.options.leftFormateString = n.data("leftformatestring")), n.data("rightformatestring") !== undefined && (this.options.rightFormateString = n.data("rightformatestring")), n.data("pagenumberformatestring") !== undefined && (this.options.pageNumberFormateString = n.data("pagenumberformatestring")), n.data("pagesizelistformatestring") !== undefined && (this.options.pageSizeListFormateString = n.data("pagesizelistformatestring")), n.data("prevpagetext") !== undefined && (this.options.prevPageText = n.data("prevpagetext")), n.data("nextpagetext") !== undefined && (this.options.nextPageText = n.data("nextpagetext")), n.data("prevgrouppagetext") !== undefined && (this.options.prevGroupPageText = n.data("prevgrouppagetext")), n.data("nextgrouppagetext") !== undefined && (this.options.nextGroupPageText = n.data("nextgrouppagetext")), n.data("firstpagetext") !== undefined && (this.options.firstPageText = n.data("firstpagetext")), n.data("lastpagetext") !== undefined && (this.options.lastPageText = n.data("lastpagetext")), n.data("pageinput-placeholder") !== undefined && (this.options.pageInputPlaceholder = n.data("pageinput-placeholder")), n.data("pageinput-timeout") !== undefined && (this.options.pageInputTimeout = parseInt(n.data("pageinput-timeout"))), n.data("pagesizelist") !== undefined && (this.options.pageSizeList = eval(n.data("pagesizelist"))), n.data("pagechanged") !== undefined) {
                var attrPageChanged = n.data("pagechanged");
                this.options.pageChanged = typeof attrPageChanged == "function" ? attrPageChanged : attrPageChanged.trim().substr(0, 8) == "function" ? function (pageIndex, pageSize) {
                    eval("var fn = " + attrPageChanged);
                    fn(pageIndex, pageSize)
                } : function () {
                    eval(attrPageChanged)
                }
            }
            t !== undefined && ($.extend(!0, this.options, t), t.pageSizeList && (this.options.pageSizeList = t.pageSizeList));
            this.fixPageIndex()
        };
        this.init();
        this.render()
    };
    return new i(n, t)
};